#!/usr/bin/env bash
# Snakypy - https://github.com/snakypy (by: William C. Canin)
# Version: 0.1.0
# Type: shellscript
# Executor: bash
# Description:
# This file is responsible for:
# 	* Create/Compile the Python package
# 	* Clear compilation/creation
# 	* Install the Python package
# 	* Reinstall the Python package
# 	* Uninstall the Python package
# 	* Upload the package to the Test PyPi server
# 	* Upload the package to the PyPi server
#   * Checking the code structure - Linter (flake8)
# Usage:
# 	$ bin/bootstrap -h

### << Global variables.

    ## Name of the package you are creating
	PACKAGE_NAME="dotctrl"
	PYTHON_EXEC="python3" ## Executável em Python. E.g: python | python3
	GET_SHELL="$(echo $SHELL)"
	VM_FOLDER="venv"

## >>

### << Function color for messages.

    function _msg_header_ () {
        printf "\e[0;36m→ %s\e[0m$2" "$1"
    }

    function _msg_reply_ () {
        printf "\e[0;36m→ %s\e[0m$2" "$1"
    }

    function _msg_finish_ () {
        printf "\e[0;32m✔ %s\e[0m\n" "$@"
    }

    function _msg_warning_ () {
        printf "\e[0;33m⚠ %s\e[0m\n" "$@"
    }

    function _msg_error_ () {
        printf "\e[0;31m✖ %s\e[0m\n" "$@"
    }

## >>

## << BEGIN

## << Install requirements.

	function _install_requirements () {

		if [[ $VIRTUAL_ENV ]]; then
			if [[ -f requirements_dev.txt ]] && [[ -f requirements.txt ]]; then
			    pip install --upgrade pip
			    _msg_header_ "Installed the requirements..." "\n"
			    pip install -r requirements_dev.txt
			    pip install -r requirements.txt
			    _msg_finish_ "Requirements installation completed!"
			fi
		else
			_msg_finish_ "Nothing to do."
		fi

	}

## >>

### << Creating file ~/.pypirc if not exists.

	function _creating_pypirc () {

		if [[ ! -f "$HOME/.pypirc" ]]; then

cat << EOF > $HOME/.pypirc
[distutils]
index-servers=
   pypi
   testpypi

[pypi]
repository: https://upload.pypi.org/legacy/
username: williamcanin

[testpypi]
repository: https://test.pypi.org/legacy/
username: williamcanin
EOF
		fi

	}

### >>

### << Performs the linter (flake8).

	function _linter_flake8 () {
		if [[ -f $(which flake8) ]]; then
			_msg_header_ "[ Linter ] Checks whether the code structure ..." "\n"
			flake8 dotctrl tests
			_msg_finish_ "Linter finished!"
		else
			_msg_error_ "Linter flake8 not installed.\nInstall the requirements that this resolves."
			exit 0
		fi
	}

### >>


### << Code style (black).

	function _code_style_black () {
		if [[ -f $(which black) ]]; then
			_msg_header_ "[ Format ] Formatting code with Black ..." "\n"
			black dotctrl/ tests/
			_msg_finish_ "Code formatted finished!"
		else
			_msg_error_ "black not installed.\nInstall the requirements that this resolves."
			exit 0
		fi
	}

### >>

### << Compile project.

	function _build_package () {

		_msg_header_ "[ Clearing cache and compiling ]" "\n"
		$(echo "$0") clean
		_msg_header_ "Compiling..." "\n"
		${PYTHON_EXEC} setup.py bdist bdist_wheel
		_msg_finish_ "Compilation completed!"

	}

### >>

### << Install project.


	function _install_reinstall_package () {

		_msg_header_ "[ $1 the package ]" "\n"
		[[ $2 == "r" ]] && $(echo "$0") uninstall
		$(echo "$0") build
		$PYTHON_EXEC setup.py install
		# $PYTHON_EXEC setup.py develop
		_msg_finish_ "$1 completed!"

	}

### >>

### << Generates documentation.

	function _generator_docs () {

		rm -f docs/zshpower*.rst
		rm -f docs/modules.rst
		rm -rf docs/_build
		sphinx-apidoc -o docs/ zshpower
		$GET_SHELL -c "cd docs; make html"
		_msg_warning_ "The documentation was generated in: ./docs/_build/html"

	}

### >>

### << Start server documentation.

	function _serve_docs () {

		if [[ ! -d "docs/_build/html" ]]; then
			_msg_warning_ "Documentation has not yet been compiled. Aborted!"
			exit 0
		fi
		$GET_SHELL -c "cd docs/_build/html; ${PYTHON_EXEC} -m http.server"

	}

### >>



### << Clean builds.

	function _clean () {

		_msg_header_ "Cleaning build..." "\n"
		rm -rf ./build ./dist ./.eggs ./.pytest_cache ./.tox
		rm -f ./docs/zshpower.rst
		rm -f ./docs/modules.rst
		rm -rf ./docs/_build
		find . '!' -path "./$VM_FOLDER/*" -name '*.egg-info' -exec rm -fr {} +
		find . '!' -path "./$VM_FOLDER/*" -name '*.egg' -exec rm -f {} +
		find . '!' -path "./$VM_FOLDER/*" -name '*.pyc' -exec rm -f {} +
		find . '!' -path "./$VM_FOLDER/*" -name '__pycache__' -exec rm -fr {} +
		find . '!' -path "./$VM_FOLDER/*" -name '*~' -exec rm -f {} +
		_msg_finish_ "Clean build!"

	}

### >>

### << Clean builds.

    function _uninstall_package () {

        local search=$(pip freeze | grep ${PACKAGE_NAME} | cut -d'=' -f1)
        if [[ -z $search ]]; then
            _msg_finish_ "Nothing to do."
            exit 0
        fi
        _msg_header_ "Uninstalling the package..." "\n"
        pip uninstall ${PACKAGE_NAME} -y
        _msg_finish_ "Uninstall completed!"
    }

### >>

### << Upload to Test Pypi (Using Twine).

    function _upload_test_pypi () {

        _creating_pypirc
        _msg_header_ "[ Upload to Test Pypi (http://test.pypi.org) ]" "\n"
        $(echo "$0") build
        _msg_header_ "Starting upload..."
        twine upload --repository testpypi dist/*
        _msg_finish_ "Upload complete!"

    }

### >>

### << Upload to Pypi (Using Twine).

    function _upload_pypi () {

        _creating_pypirc
        _msg_header_ "[ Upload to Pypi (https://pypi.org) ]" "\n"
        $(echo "$0") build
        _msg_header_ "Starting upload..."
        twine upload --repository pypi dist/*
        _msg_finish_ "Upload complete!"
        # twine upload dist/*

    }

### >>

### << Help.

	function _help () {

		cat << EOT

Welcome to the package manager.

Usage: $0 <options>

    options:
	> requeriments | -q          Install requirements.
	> build        | -b          Compile the package.
	> clean        | -c          Clears the build.
	> install      | -i          Install the package.
	> reinstall    | -r          Reinstall the package.
	> uninstall    | -u          Uninstall the package.
	> linter       | -l          Checks whether the code structure complies with Pep8.
    > black        | -bk         Formatting code with Black.
	> test         | -t          Run tests.
	> docs         | -d          Generate Sphinx HTML documentation.
	> docs -s                    Starts the documentation server.
	> testpypi     | -tpp        Upload the package to the Test PyPi server.
	> pypi         | -pp         Upload the package to the PyPi server.

Copyright (c) 2019-$(date +%Y) - William C. Canin

EOT

	}

## >>

### << Main.

	function _main () {

		case "$1" in
			requirements|-q)
				_install_requirements
			;;
		    build|-b|-B)
				_build_package
		    ;;
		    install|-i|-I)
				_install_reinstall_package "Installation"
		    ;;
		    reinstall|-r|-R)
				_install_reinstall_package "Reinstallation" "r"
		    ;;
		    clean|-c|-C)
				_clean
		    ;;
		    linter|-l)
				_linter_flake8
		    ;;
                    black|-bk)
				_code_style_black
		    ;;
		    uninstall|-u|-U)
				_uninstall_package
		    ;;
		    docs|-d)
		        case "$2" in
			    -s|-S)
			        _generator_docs
			        _serve_docs
			    ;;
			    *)
			        _generator_docs
			    ;;
			esac
		    ;;
		    test|-t)
				pytest
			;;
		    testpypi|-tpp)
                _upload_test_pypi
		    ;;
		    pypi|-pp)
                _upload_pypi
		    ;;
		    help|-h)
				_help
			;;
		    *)
		        $(echo "$0") help
		    ;;
		esac

	}

## >>

### Start.

    _main "$1" "$2"

## END >>
